{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Author:\n",
    "\n",
    "KMR (Kandori-Mailath-Rob) Model\n",
    "\n",
    "\"\"\"\n",
    "from __future__ import division\n",
    "import numpy as np\n",
    "import quantecon as qe\n",
    "from scipy.stats import binom\n",
    "\n",
    "def kmr_markov_matrix(p, N, epsilon):\n",
    "    \"\"\"\n",
    "    Generate the transition probability matrix for the KMR dynamics with\n",
    "    two acitons.\n",
    "\n",
    "    \"\"\"\n",
    "    P=np.zeros((N+1, N+1))\n",
    "    for n in range(N+1):\n",
    "        if n/N > p:\n",
    "            binomial_distribution=[binom.pmf(i,N,1-epsilon/2) for i in range(N+1)]\n",
    "            for i in range(N+1):\n",
    "                P[n][i]=binomial_distribution[i]\n",
    "        if n/N < p:\n",
    "            binomial_distribution=[binom.pmf(i,N,epsilon/2) for i in range(N+1)]\n",
    "            for i in range(N+1):\n",
    "                P[n][i]=binomial_distribution[i]\n",
    "        if n/N == p:\n",
    "            binomial_distribution=[binom.pmf(i,N,1/2) for i in range(N+1)]\n",
    "            for i in range(N+1):\n",
    "                P[n][i]=binomial_distribution[i]\n",
    "    return P\n",
    "\n",
    "\n",
    "    \n",
    "\n",
    "\n",
    "class KMR(object):\n",
    "    \"\"\"\n",
    "    Class representing the KMR dynamics with two actions.\n",
    "\n",
    "    \"\"\"\n",
    "    def __init__(self, p, N, epsilon):\n",
    "        P = kmr_markov_matrix(p, N, epsilon)\n",
    "        self.mc = qe.MarkovChain(P)\n",
    "\n",
    "    def simulate(self, ts_length, init=None, num_reps=None):\n",
    "        \"\"\"\n",
    "        Simulate the dynamics\n",
    "\n",
    "        Parameters\n",
    "        ----------\n",
    "        ts_length : scalar(int)\n",
    "            Length of each simulation.\n",
    "\n",
    "        init : scalar(int) or array_like(int, ndim=1),\n",
    "               optional(default=None)\n",
    "            Initial state(s). If None, the initial state is randomly\n",
    "            drawn.\n",
    "\n",
    "        num_reps : scalar(int), optional(default=None)\n",
    "            Number of simulations. Relevant only when init is a scalar\n",
    "            or None.\n",
    "\n",
    "        Returns\n",
    "        -------\n",
    "        X : ndarray(int, ndim=1 or 2)\n",
    "            Array containing the sample path(s), of shape (ts_length,)\n",
    "            if init is a scalar (integer) or None and num_reps is None;\n",
    "            of shape (k, ts_length) otherwise, where k = len(init) if\n",
    "            init is an array_like, otherwise k = num_reps.\n",
    "\n",
    "        \"\"\"\n",
    "        if init is None:\n",
    "            #init = random.randint(0,len(P)-1)\n",
    "            init = 0\n",
    "        return self.mc.simulate(init=init, sample_size=ts_length)\n",
    "\n",
    "    def compute_stationary_distribution(self):\n",
    "        return self.mc.stationary_distributions[0]  "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
